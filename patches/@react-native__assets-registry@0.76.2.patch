diff --git a/path-support.js b/path-support.js
index 7d9388ad12567ba99d1c02650cb25c16a052d3de..131f4057847537a8e513d0595fc08d35cf2fbf28 100644
--- a/path-support.js
+++ b/path-support.js
@@ -5,20 +5,17 @@
  * LICENSE file in the root directory of this source tree.
  *
  * @format
- * @flow strict
  */
 
-'use strict';
-
-import type {PackagerAsset} from './registry.js';
+"use strict";
 
 const androidScaleSuffix = {
-  '0.75': 'ldpi',
-  '1': 'mdpi',
-  '1.5': 'hdpi',
-  '2': 'xhdpi',
-  '3': 'xxhdpi',
-  '4': 'xxxhdpi',
+  0.75: "ldpi",
+  1: "mdpi",
+  1.5: "hdpi",
+  2: "xhdpi",
+  3: "xxhdpi",
+  4: "xxxhdpi",
 };
 
 const ANDROID_BASE_DENSITY = 160;
@@ -27,63 +24,57 @@ const ANDROID_BASE_DENSITY = 160;
  * FIXME: using number to represent discrete scale numbers is fragile in essence because of
  * floating point numbers imprecision.
  */
-function getAndroidAssetSuffix(scale: number): string {
+function getAndroidAssetSuffix(scale) {
   if (scale.toString() in androidScaleSuffix) {
-    // $FlowFixMe[invalid-computed-prop]
     return androidScaleSuffix[scale.toString()];
   }
-  // NOTE: Android Gradle Plugin does not fully support the nnndpi format.
-  // See https://issuetracker.google.com/issues/72884435
   if (Number.isFinite(scale) && scale > 0) {
-    return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';
+    return Math.round(scale * ANDROID_BASE_DENSITY) + "dpi";
   }
-  throw new Error('no such scale ' + scale.toString());
+  throw new Error("no such scale " + scale.toString());
 }
 
 // See https://developer.android.com/guide/topics/resources/drawable-resource.html
 const drawableFileTypes = new Set([
-  'gif',
-  'jpeg',
-  'jpg',
-  'ktx',
-  'png',
-  'svg',
-  'webp',
-  'xml',
+  "gif",
+  "jpeg",
+  "jpg",
+  "ktx",
+  "png",
+  "svg",
+  "webp",
+  "xml",
 ]);
 
-function getAndroidResourceFolderName(
-  asset: PackagerAsset,
-  scale: number,
-): string | $TEMPORARY$string<'raw'> {
+function getAndroidResourceFolderName(asset, scale) {
   if (!drawableFileTypes.has(asset.type)) {
-    return 'raw';
+    return "raw";
   }
   const suffix = getAndroidAssetSuffix(scale);
   if (!suffix) {
     throw new Error(
       "Don't know which android drawable suffix to use for scale: " +
         scale +
-        '\nAsset: ' +
-        JSON.stringify(asset, null, '\t') +
-        '\nPossible scales are:' +
-        JSON.stringify(androidScaleSuffix, null, '\t'),
+        "\nAsset: " +
+        JSON.stringify(asset, null, "\t") +
+        "\nPossible scales are:" +
+        JSON.stringify(androidScaleSuffix, null, "\t"),
     );
   }
-  return 'drawable-' + suffix;
+  return "drawable-" + suffix;
 }
 
-function getAndroidResourceIdentifier(asset: PackagerAsset): string {
-  return (getBasePath(asset) + '/' + asset.name)
+function getAndroidResourceIdentifier(asset) {
+  return (getBasePath(asset) + "/" + asset.name)
     .toLowerCase()
-    .replace(/\//g, '_') // Encode folder structure in file name
-    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars
-    .replace(/^assets_/, ''); // Remove "assets_" prefix
+    .replace(/\//g, "_") // Encode folder structure in file name
+    .replace(/([^a-z0-9_])/g, "") // Remove illegal chars
+    .replace(/^assets_/, ""); // Remove "assets_" prefix
 }
 
-function getBasePath(asset: PackagerAsset): string {
+function getBasePath(asset) {
   const basePath = asset.httpServerLocation;
-  return basePath.startsWith('/') ? basePath.slice(1) : basePath;
+  return basePath.startsWith("/") ? basePath.slice(1) : basePath;
 }
 
 module.exports = {
diff --git a/registry.js b/registry.js
index 64b2735d3bb5284bd2450bf0d06115c3de5dcf80..8bf537f37f2d0b877dcf57bf38e17dda3edb47b0 100644
--- a/registry.js
+++ b/registry.js
@@ -8,34 +8,18 @@
  * @format
  */
 
-'use strict';
+"use strict";
 
-export type AssetDestPathResolver = 'android' | 'generic';
+const assets = [];
 
-export type PackagerAsset = {
-  +__packager_asset: boolean,
-  +fileSystemLocation: string,
-  +httpServerLocation: string,
-  +width: ?number,
-  +height: ?number,
-  +scales: Array<number>,
-  +hash: string,
-  +name: string,
-  +type: string,
-  +resolver?: AssetDestPathResolver,
-  ...
-};
-
-const assets: Array<PackagerAsset> = [];
-
-function registerAsset(asset: PackagerAsset): number {
+function registerAsset(asset) {
   // `push` returns new array length, so the first asset will
   // get id 1 (not 0) to make the value truthy
   return assets.push(asset);
 }
 
-function getAssetByID(assetId: number): PackagerAsset {
+function getAssetByID(assetId) {
   return assets[assetId - 1];
 }
 
-module.exports = {registerAsset, getAssetByID};
+module.exports = { registerAsset, getAssetByID };
